<!DOCTYPE html>
<html>
<head>
  <title>Work Orders Schedule</title>
  <!-- Using grid so work orders can span over multiple rows -->
  <style>
    .grid-container {
      border: thin solid black;
      position: relative;
      display: grid;
      grid-template-columns: 60px repeat(<%= @technicians.count %>, 1fr)
    }
    .grid-header {
      background-color: lightgrey;
      border: thin solid black;
      height: 22px;
      font-size: larger;
      text-align: center;
    }
    .grid-item {
      border: thin solid black;
      height: 120px;
      cursor: pointer;
    }
    .block {
      position: absolute;
      background-color: lightblue;
      border: thin solid black;
      padding: 2px;
      width: calc((100% - 84px) / <%= @technicians.count %>);
    }
  </style>
</head>
<body>
  <h1 style="text-align: center;">Work Orders Schedule</h1>

  <div class="grid-container">
    <div class="grid-header">Time</div>
    <% @technicians.each do |technician| %>
      <div class="grid-header"><%= technician.name %></div>
    <% end %>

    <!-- Main Loop: Each hour, go through each tech, find any relevant work orders -->
    <% (0..23).each do |hour| %>
      <div class="grid-item"><%= "#{hour}:00" %></div>
      <% @technicians.each do |technician| %>
        <div class="grid-item" data-hour="<%= hour %>" data-technician-id="<%= technician.id %>"></div>
        <% @work_orders.each do |work_order| %>
          <% if work_order.technician_id == technician.id && work_order.time.hour == hour %>
            <!-- Adjust block dimensions to match left time column -->
            <div class="block" style=
            "height: <%= (work_order.duration + (work_order.duration / 61)) * 2 - 4 %>px;
            left: calc(60px + (<%= technician.id - 1 %> * calc((100% - 60px) / <%= @technicians.count %>)));
            top: calc(24px + <%= (hour) * 122 + (work_order.time.min * 2) %>px);">
              <!-- Fill in work order information -->
              <strong><%= work_order.location.name %></strong><br>
              <%= work_order.location.city %><br>
              <%= work_order.time.strftime("%H:%M") %><br>
              <%= number_to_currency(work_order.price) %>
            </div>
          <% end %>
        <% end %>
      <% end %>
    <% end %>
  </div>
  <script>
    document.querySelectorAll(".grid-item[data-technician-id]").forEach(item => {
      item.addEventListener("click", function() {
        const hour = parseInt(this.getAttribute("data-hour"));
        const chosen_minute = hour * 60;  // Easier to calculate with

        // Find relevant work orders for specific tech
        const technician_id = parseInt(this.getAttribute("data-technician-id"));
        const work_orders = <%= @work_orders.to_json.html_safe %>;  // Convert work orders to JSON for extracting data       
        const relevant_orders = work_orders.filter(order => order.technician_id === technician_id);  

        let before = 0, after = 0;  // Minutes before and after hour clicked
        let i = 0;
        let prev_end_minute = 0;  // Used to calculate before time, starts as beginning of day

        while (i < relevant_orders.length) {
          // Finding current start and end time
          let curr_time = new Date(relevant_orders[i].time);
          let curr_hour = curr_time.getHours();
          let curr_min = curr_time.getMinutes();
          let curr_duration = relevant_orders[i].duration;
          let curr_start_minute = (curr_hour + 6) * 60 + curr_min;
          let curr_end_minute = curr_start_minute + curr_duration;


          if (chosen_minute >= curr_start_minute && chosen_minute < curr_start_minute + relevant_orders[i].duration) {
            // The chosen time is during an existing work order
            if (i + 1 < relevant_orders.length) {  // Find start of next work order (or EOD)
              let next_time = new Date(relevant_orders[i + 1].time);
              let next_hour = next_time.getHours();
              let next_min = next_time.getMinutes();
              let next_start_minute = (next_hour + 6) * 60 + next_min;

              after = next_start_minute - curr_end_minute; // Time from end of current work order to start of next
            } else {
              after = 23 * 60 - curr_end_minute; // Time from end of work order to end of day
            }

            // Start generating data to be displayed
            end_time = `${Math.floor((curr_start_minute + curr_duration) / 60)}:${((curr_start_minute + curr_duration) % 60).toString().padStart(2, '0')}`;
            start_time = `${curr_hour+6}:${curr_min.toString().padStart(2, '0')}`;
            before = curr_start_minute - prev_end_minute;

            // Ensure work orders overlapping are accounted for
            if (i > 0) {
              let curr_start_minute_temp = curr_start_minute;
              let prev_time = new Date(relevant_orders[i - 1].time);
              let prev_hour = prev_time.getHours();
              let prev_min = prev_time.getMinutes();
              let prev_start_minute = (prev_hour + 6) * 60 + prev_min;
              let prev_end_minute = prev_start_minute + relevant_orders[i - 1].duration;

              while (i > 0 && before < 0) {
                curr_start_minute_temp = prev_start_minute;
                start_time = `${prev_hour+6}:${prev_min.toString().padStart(2, '0')}`;

                // Work backwards until overlap is not found
                prev_time = new Date(relevant_orders[i - 1].time);
                prev_hour = prev_time.getHours();
                prev_min = prev_time.getMinutes();
                prev_start_minute = (prev_hour + 6) * 60 + prev_min;
                prev_end_minute = prev_start_minute + relevant_orders[i - 1].duration;
                before = curr_start_minute_temp - prev_end_minute;
                if (before > 0) {
                  break;
                }
                i--;
              }
              if (i === 0) {
                before = prev_start_minute;
                start_time = `${prev_hour+6}:${prev_min.toString().padStart(2, '0')}`;
              }
            }

            alert(`Work order(s) in progress\n` + 
                  `There are ${before} minutes available before ${start_time}\n` + 
                  `There are ${after} minutes available after ${end_time}`);
            return;
          } else if (chosen_minute < curr_start_minute) {
            // The chosen time is before the current work order
            before = chosen_minute - prev_end_minute;
            after = curr_start_minute - chosen_minute;
            break;
          }
          prev_end_minute = curr_end_minute;
          i++;
        }

        if (i === relevant_orders.length) {
          // Chosen time is after the last work order
          before = chosen_minute - prev_end_minute;
          after = 24 * 60 - chosen_minute;  
        }

        alert(`There are ${before + after} minutes available in this time slot.`);
      });
    });
  </script>
</body>
</html>